{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/rn-starter/src/screens/ColorScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar ColorScreen = function ColorScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      colors = _useState2[0],\n      setColors = _useState2[1];\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }\n  }, React.createElement(Button, {\n    title: \"Add a color\",\n    onPress: function onPress() {\n      setColors([].concat(_toConsumableArray(colors), [randomRgb()]));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }), React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item) {\n      return item;\n    },\n    data: colors,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: {\n          height: 100,\n          width: 100,\n          backgroundColor: item,\n          marginLeft: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar randomRgb = function randomRgb() {\n  var red = Math.floor(Math.random() * 256);\n  var green = Math.floor(Math.random() * 256);\n  var blue = Math.floor(Math.random() * 256);\n  return \"rgb(\" + red + \",\" + green + \",\" + blue + \")\";\n};\n\nvar styles = StyleSheet.create({});\nexport default ColorScreen;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/rn-starter/src/screens/ColorScreen.js"],"names":["React","useState","ColorScreen","colors","setColors","randomRgb","item","height","width","backgroundColor","marginLeft","red","Math","floor","random","green","blue","styles","StyleSheet","create"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,kBACMD,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,MACfE,MADe;AAAA,MACPC,SADO;;AAGtB,SAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,aAAd;AAA4B,IAAA,OAAO,EAAE,mBAAM;AACnCA,MAAAA,SAAS,8BAAKD,MAAL,IAAaE,SAAS,EAAtB,GAAT;AACH,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,EAKH,oBAAC,QAAD;AACI,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIA,IAAJ;AAAA,KADtB;AAEI,IAAA,IAAI,EAAEH,MAFV;AAGI,IAAA,UAAU,EAAE,0BAAc;AAAA,UAAXG,IAAW,QAAXA,IAAW;AACtB,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE,GAAT;AAAcC,UAAAA,KAAK,EAAE,GAArB;AAA0BC,UAAAA,eAAe,EAAEH,IAA3C;AAAgDI,UAAAA,UAAU,EAAC;AAA3D,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAIH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALG,CAAP;AAgBH,CAnBD;;AAqBA,IAAML,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAMM,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAZ;AACA,MAAMC,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAd;AACA,MAAME,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAb;AAEA,kBAAcH,GAAd,SAAqBI,KAArB,SAA8BC,IAA9B;AACH,CAND;;AAOA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAEA,eAAejB,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Button, FlatList } from 'react-native';\n\n\nconst ColorScreen = () => {\n    const [colors, setColors] = useState([]);\n\n    return <View>\n        <Button title=\"Add a color\" onPress={() => {\n                setColors([...colors, randomRgb()]);\n            }}\n        />\n        <FlatList\n            keyExtractor={item => item}\n            data={colors}\n            renderItem={({ item }) => {\n                return (\n                    <View style={{height: 100, width: 100, backgroundColor: item,marginLeft:15}}></View>\n                );\n\n            }}\n        />\n    </View>\n};\n\nconst randomRgb = () => {\n    const red = Math.floor(Math.random() * 256);\n    const green = Math.floor(Math.random() * 256);\n    const blue = Math.floor(Math.random() * 256);\n\n    return `rgb(${red},${green},${blue})`;\n}\nconst styles = StyleSheet.create({});\n\nexport default ColorScreen;\n"]},"metadata":{},"sourceType":"module"}